"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ShellPool_1 = require("./ShellPool");
class ShellExplosion extends PuertsLogic {
    constructor(mono) {
        super(mono);
        this.m_boxCollider = null;
        this.lastT = new Date;
        this.m_spawnTime = new Date;
        this.behaviour.JsReset = this.Reset.bind(this);
        this.behaviour.JsOnTriggerEnter = this.OnTriggerEnter.bind(this);
    }
    Start() {
        // If it isn't destroyed by then, destroy the shell after it's lifetime.
        //Destroy (gameObject, m_MaxLifeTime);
        this.Reset();
        this.m_boxCollider = this.behaviour.GetComponent(puerts.$typeof(CS.UnityEngine.BoxCollider));
    }
    Reset() {
        this.lastT = new Date;
        this.m_spawnTime = new Date;
    }
    Update() {
        var time = new Date;
        var dt = (time.getTime() - this.lastT.getTime()) / 1000;
        var lifeTime = (time.getTime() - this.m_spawnTime.getTime()) / 1000;
        if (lifeTime >= this.behaviour.m_MaxLifeTime) {
            ShellPool_1.default.Destroy(this.behaviour.gameObject);
        }
        else {
            // CS.UnityEngine.Debug.Log(dt * 20);
            this.behaviour.transform.position = CS.UnityEngine.Vector3.op_Addition(this.behaviour.transform.position, CS.UnityEngine.Vector3.op_Multiply(this.behaviour.transform.forward, dt * 20));
            var other = this.behaviour.m_PhyWorld.jsBehaviour.CheckCollideWithPlayer(this.m_boxCollider, this.behaviour.m_PlayerNumber);
            if (other != null) {
                other.GetComponent(puerts.$typeof(CS.PuertsTest.TankHealth)).jsBehaviour.TakeDamage(30);
                // CS.UnityEngine.Debug.Log("bullet intersect: " + other.name.ToString());
            }
        }
        this.lastT = time;
    }
    OnTriggerEnter() {
        // Collect all the colliders in a sphere from the shell's current position to a radius of the explosion radius.
        var colliders = CS.UnityEngine.Physics.OverlapSphere(this.behaviour.transform.position, this.behaviour.m_ExplosionRadius, this.behaviour.m_TankMask);
        // Go through all the colliders...
        for (let i = 0; i < colliders.Length; i++) {
            // ... and find their rigidbody.
            var targetRigidbody = colliders[i].GetComponent(puerts.$typeof(CS.UnityEngine.Rigidbody));
            // If they don't have a rigidbody, go on to the next collider.
            if (!targetRigidbody)
                continue;
            // Add an explosion force.
            targetRigidbody.AddExplosionForce(this.behaviour.m_ExplosionForce, this.behaviour.transform.position, this.behaviour.m_ExplosionRadius);
            // Find the TankHealth script associated with the rigidbody.
            var targetHealth = targetRigidbody.GetComponent(puerts.$typeof(CS.PuertsTest.TankHealth));
            // If there is no TankHealth script attached to the gameobject, go on to the next collider.
            if (!targetHealth)
                continue;
            // Calculate the amount of damage the target should take based on it's distance from the shell.
            var damage = this.CalculateDamage(targetRigidbody.position);
            // Deal this damage to the tank.
            targetHealth.jsBehaviour.TakeDamage(damage);
        }
        // Unparent the particles from the shell.
        this.behaviour.m_ExplosionParticles.transform.parent = null;
        // Play the particle system.
        this.behaviour.m_ExplosionParticles.Play();
        // Play the explosion sound effect.
        // this.behaviour.m_ExplosionAudio.Play();
        // Once the particles have finished, destroy the gameobject they are on.
        var mainModule = this.behaviour.m_ExplosionParticles.main;
        CS.UnityEngine.Object.Destroy(this.behaviour.m_ExplosionParticles.gameObject, mainModule.duration);
        // Destroy the shell.
        // public static void Destroy(GameObject gameObject)
        // {
        //   gameObject.SetActive(false);
        //   m_freeShellList.Add(gameObject);
        // }
        // CS.PuertsTest.ShellPool.Destroy()
        CS.UnityEngine.Object.Destroy(this.behaviour.gameObject);
    }
    CalculateDamage(targetPosition) {
        // Create a vector from the shell to the target.
        var explosionToTarget = CS.UnityEngine.Vector3.op_Subtraction(targetPosition, this.behaviour.transform.position);
        // Calculate the distance from the shell to the target.
        var explosionDistance = explosionToTarget.magnitude;
        // Calculate the proportion of the maximum distance (the explosionRadius) the target is away.
        var relativeDistance = (this.behaviour.m_ExplosionRadius - explosionDistance) / this.behaviour.m_ExplosionRadius;
        // Calculate damage as this proportion of the maximum possible damage.
        var damage = relativeDistance * this.behaviour.m_MaxDamage;
        // Make sure that the minimum damage is always 0.
        damage = CS.UnityEngine.Mathf.Max(0, damage);
        return damage;
    }
}
exports.default = ShellExplosion;
