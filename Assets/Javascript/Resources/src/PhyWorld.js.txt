"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoxEntity = exports.AABBInfo = void 0;
class AABBInfo {
}
exports.AABBInfo = AABBInfo;
class BoxEntity {
}
exports.BoxEntity = BoxEntity;
class PhyWorld extends PuertsLogic {
    constructor() {
        super(...arguments);
        this.m_staticEntities = [];
        this.m_bulletEntities = [];
        this.m_playerEntities = [];
    }
    GetAABB(box) {
        var pos = CS.UnityEngine.Vector3.op_Addition(box.center, box.transform.position);
        var aabb = new AABBInfo();
        aabb.minX = pos.x - box.size.x / 2;
        aabb.minY = pos.y - box.size.y / 2;
        aabb.minZ = pos.z - box.size.z / 2;
        aabb.maxX = pos.x + box.size.x / 2;
        aabb.maxY = pos.y + box.size.y / 2;
        aabb.maxZ = pos.z + box.size.z / 2;
        return aabb;
    }
    Start() {
        var comps = this.behaviour.StaticWorld.GetComponentsInChildren(puerts.$typeof(CS.UnityEngine.BoxCollider));
        for (let i = 0; i < comps.Length; i++) {
            var box = comps[i];
            var entity = new BoxEntity();
            entity.collider = comps[i];
            entity.aabb = this.GetAABB(box);
            this.m_staticEntities.push(entity);
        }
    }
    AddPlayer(box) {
        var entity = new BoxEntity();
        entity.collider = box;
        entity.aabb = this.GetAABB(box);
        this.m_playerEntities.push(entity);
    }
    CheckCollideWithPlayer(box, playerNum) {
        var a = this.GetAABB(box);
        for (let i = 0; i < this.m_playerEntities.length; i++) {
            const entity = this.m_playerEntities[i];
            if (playerNum == entity.collider.gameObject.GetComponent(puerts.$typeof(CS.PuertsTest.TankShooting)).m_PlayerNumber) {
                continue;
            }
            var b = this.GetAABB(entity.collider);
            if ((a.minX <= b.maxX && a.maxX >= b.minX) &&
                (a.minY <= b.maxY && a.maxY >= b.minY) &&
                (a.minZ <= b.maxZ && a.maxZ >= b.minZ)) {
                return entity.collider;
            }
        }
        return null;
    }
    CheckCollideWithStatic(box) {
        var a = this.GetAABB(box);
        for (let i = 0; i < this.m_staticEntities.length; i++) {
            const entity = this.m_staticEntities[i];
            var b = entity.aabb;
            if ((a.minX <= b.maxX && a.maxX >= b.minX) &&
                (a.minY <= b.maxY && a.maxY >= b.minY) &&
                (a.minZ <= b.maxZ && a.maxZ >= b.minZ)) {
                return entity.collider;
            }
        }
        return null;
    }
}
exports.default = PhyWorld;
